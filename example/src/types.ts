/**
 * This file was automatically generated by fastify-extract-definitions.
 * DO NOT MODIFY IT BY HAND. Instead, modify the fastify routes schemas
 * and re-run project to regenerate this file.
 */

import {
  ContextConfigDefault,
  FastifyInstance,
  FastifyLoggerInstance,
  FastifyRequest,
  FastifySchema,
  FastifyTypeProvider,
  FastifyTypeProviderDefault,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerBase,
  RawServerDefault,
} from 'fastify';
import { FastifyReply } from 'fastify/types/reply';
import { RouteGenericInterface } from 'fastify/types/route';
import {
  FastifyRequestType,
  ResolveFastifyRequestType,
} from 'fastify/types/type-provider';

export type RouteHandlerMethod<
  RawServer extends RawServerBase = RawServerDefault,
  RawRequest extends RawRequestDefaultExpression<RawServer> = RawRequestDefaultExpression<RawServer>,
  RawReply extends RawReplyDefaultExpression<RawServer> = RawReplyDefaultExpression<RawServer>,
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault,
  SchemaCompiler extends FastifySchema = FastifySchema,
  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault,
  RequestType extends FastifyRequestType = ResolveFastifyRequestType<
    TypeProvider,
    SchemaCompiler,
    RouteGeneric
  >,
  Logger extends FastifyLoggerInstance = FastifyLoggerInstance
> = (
  this: FastifyInstance<RawServer, RawRequest, RawReply, Logger, TypeProvider>,
  request: FastifyRequest<
    RouteGeneric,
    RawServer,
    RawRequest,
    SchemaCompiler,
    TypeProvider,
    ContextConfig,
    Logger,
    RequestType
  >,
  reply: FastifyReply<
    RawServer,
    RawRequest,
    RawReply,
    RouteGeneric,
    ContextConfig,
    SchemaCompiler,
    TypeProvider,
    RouteGeneric['Reply']
  >
) => Promise<RouteGeneric['Reply']> | RouteGeneric['Reply'] | void;

export type Handler<
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault
> = RouteHandlerMethod<
  RawServerDefault,
  RawRequestDefaultExpression,
  RawReplyDefaultExpression,
  RouteGeneric,
  ContextConfig
>;

export type RootGetReply = RootGetReplyStatus200;

export type MODE = 'production' | 'development' | 'test';

export type FooBarGetReply = FooBarGetReplyStatus200;

export type FooBarGetReplyStatus200 = string;

export interface API {
  '/': {
    GET: RootGet;
  };
  '/foo/:bar': {
    GET: FooBarGet;
  };
}

export interface RootGet {
  Reply: RootGetReply;
}

export interface RootGetReplyStatus200 {
  version: string;
  name: string;
  mode: MODE;
}

export interface FooBarGet {
  Params: FooBarGetParams;
  Reply: FooBarGetReply;
}

export interface FooBarGetParams {
  bar: string;
}
